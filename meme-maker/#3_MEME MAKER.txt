
#3.0 Adding Images

만들 것 (밈 메이커 기능)
- canvas에 이미지 추가
- 이미지 위에 텍스트 추가

  // html
  <input type="file" />

*문제
예를 들어 이미지를 선택하려고 하는데 비디오도 선택할 수 있음

  <input type="file" accept="image/*" />

  원하는 파일의 타입을 설정할 수 있음
  (png, gif, jpeg 등 포맷 상관없이 이미지만 원한다는 뜻)


files: / 0: 보면 user가 선택한 파일의 정보를 확인할 수 있음

  const fileInput = document.getElementById('file');

  function onFileChange(event) {
    console.dir(event.target);
  }

  fileInput.addEventListener('change', onFileChange);

**브라우저는 항상 user와 실제 파일 시스템과 격리되어 있음
예를 들어, 브라우저의 javascript는 user의 파일을 읽을 수 없음

파일들은 user가 파일을 선택했을 때만 javascript에게 보이게 됨
user가 파일을 선택했기 때문에, 선택된 파일은 브라우저의 메모리 속에 들어감


URL을 가지고 선택된 파일에 접근하고 싶음
파일은 브라우저의 메모리에 있고, 브라우저가 그 메모리 부분의 URL을 줬으면

  function onFileChange(event) {
    const file = event.target.files[0];
    const url = URL.createObjectURL(file);
    console.log(url);
  }

  // 출력값
  blob:http://127.0.0.1:5500/be766d1b-366f-4699-8fb2-142732bb2ed7


`blob:http://127.0.0.1:5500/be766d1b-366f-4699-8fb2-142732bb2ed7`
이걸 복사해서 새 탭에 붙여넣기 하면 user가 선택한 이미지를 볼 수 있음

**이 URL은 현실의 인터넷에서 존재하지는 않음, 브라우저를 위한 URL임
⇒ 이게 브라우저가 자신의 메모리에 있는 파일을 드러내는 방식


이미지를 만드는 것

  const image = new image();

  /* 위 코드는 html에서 아래와 쓰는 것과 동일
  <img src=""></img> */


이미지에 event listener를 추가

  function onFileChange(event) {
    const file = event.target.files[0];
    const url = URL.createObjectURL(file);
    const image = new Image();
    image.src = url;
    image.onload = function () {
      ctx.drawImage(image, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
    };
  }


+) event를 추가하는 새로운 방법

  // canvas.onmousemove = function() {}
  canvas.onmousemove = onMove

  canvas.addEventListener('mousemove', onMove);  // 이 둘은 같은걸 의미

니콜라스가 왜 `addEventListener`를 좋아하냐면
: 같은 event안에 많은 event listener들을 추가할 수도, 삭제할 수도 있기 때문


이미지를 그릴 때 file input을 비우고 싶음 (user가 또 다른 이미지를 추가하고 싶을지도 모르니까)

  function onFileChange(event) {
    const file = event.target.files[0];
    const url = URL.createObjectURL(file);
    const image = new Image();
    image.src = url;
    image.onload = function () {
      ctx.drawImage(image, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
      fileInput.value = null;
    };
  }


#3.1 Adding Text

만들 것
- text input
    - user가 텍스트를 입력할 수 있고
    - canvas를 더블클릭하면 그 text를 추가

  // html
  <input id="text" type="text" placeholder="Write and then double click" />

  // js
  const textInput = document.getElementById('text');

  function onDoubleClick(event) {
    const text = textInput.value;
    ctx.lineWidth = 1;
    ctx.strokeText(text, event.offsetX, event.offsetY);
  }

  canvas.addEventListener('dbclick', onDoubleClick);


`dbclick`
: `dbclick` event는 기본적으로 `mousedown`, `moseup`이 매우 빠르게 일어날 때 발생함


*문제
`lineWidth`를 수정했기 때문에, painting brush의 크기도 작아졌다는 것을 의미
이론적으로 `lineWidth`를 1로 바꾸고 - text를 집어넣고 - 기존에 가지고 있던 `lineWidth`로 돌아가야 함
⇒ ctx의 이전 상태를 저장하고 - 몇 가지 변경 후에 - 그것들을 다시 되돌리고 싶음

  function onDoubleClick(event) {
    ctx.save();
    const text = textInput.value;
    ctx.lineWidth = 1;
    ctx.strokeText(text, event.offsetX, event.offsetY);
    ctx.restore();
  }


`save()`
: ctx의 현재 상태, 색상, 스타일 등 모든 것을 저장

`restore()`
: 수정을 완료하고 쓰면 `save`와 `restore`사이에서는 어떤 수정을 하던 저장되지 않고 이전에 저장된 상태로 돌아감
⇒ 변경되는 코드가 실행되기 전에 현재 상태와 선택들을 저장하기 때문


user가 canvas를 더블클릭해도 input에 text가 없으면 아무것도 하고 싶지 않도록

  function onDoubleClick(event) {
    const text = textInput.value;
    if (text === '') {
      ctx.save();
      ctx.lineWidth = 1;
      ctx.font = '68px serif';
      ctx.fillText(text, event.offsetX, event.offsetY);
      ctx.restore();
    }
  }


선을 그리면 매우 직선(as like 사각형) 둥글게

  // ctx.lineWidth = lineWidth.value; 밑에
  ctx.lineCap = 'round';


#3.2 Saving Image

만들 것
- 현재 canvas 안에 있는 이미지를 저장하는 버튼 제작

  // html
  <button id="save">Save image</button>

  // js
  const saveBtn = document.getElementById('save');

  function onSaveClick() {
    const url = canvas.toDataURL();
  }

  saveBtn.addEventListener('click', onSaveClick);

`canvas.toDataUrl`
: canvas에 있는 메소드로, user가 그린 이미지를 URL로 인코딩되어 있는 텍스트


<a>태그를 이용해서 링크를 만들 건데, 웹사이트로 링크하는 대신 이 이미지 URl로 링크 걸고
그다음 <a>태그 안에 있는 `download`라는 속성을 이용

  function onSaveClick() {
    const url = canvas.toDataURL();
    const a = document.createElement('a');
    a.href = url;
    a.download = 'Untitled.png';
    a.click();
  }

`download`
: `download`라는 속성을 <a>태그에 더해주면 파일 다운로드를 작동시킴


#3.3 Recap

-file (recap)

  // html
  <input type="file" accept="image/*" id="file" />

  // js
  function onFileChange(event) {
    const file = event.target.files[0];
    const url = URL.createObjectURL(file);
    const image = new Image();
    image.src = url;
    image.onload = function () {
      ctx.drawImage(image, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
      fileInput.value = null;
    };
  }

*`files[0]` 이게 파일 배열인 이유
: <input>에 <multiple>속성을 추가할 수 있기 때문

  <input type="file" accept="image/*" <!--mutiple--> */ id="file" />

<multiple>속성을 추가하면 user가 파일을 여러 개 업로드할 수 있음 
하지만 여기선 user가 하나의 파일만 업로드하고 있기 때문에 파일 배열에서 [0] 첫 번째 파일만 필요


-save (recap)

  function onSaveClick() {
    const url = canvas.toDataURL();
    const a = document.createElement('a');
    a.href = url;
    a.download = 'Untitled.png';
    a.click();
  }

<href>가 할당된 <a>태그가 생성돼서 - <a>태그는 이미지 URL로 감
- <download> 속성이 있고 - a.click();로 가짜 클릭만 하면 - 클릭이 다운로드 창을 띄워줌


#3.4 CSS

reset css 설치 사이트
[https://meyerweb.com/eric/tools/css/reset/](https://meyerweb.com/eric/tools/css/reset/)


  // css
  button {
    all: unset;
  }

: css속성을 전부 제거하라는 뜻
(다소 극단적이지만 없애고 싶은 속성을 하나하나 적어줄 필요 없이 all: unset; 하나로 다 제거해 주는 장점)파일 선택 <input>은 꾸미는게 엄청 어려움


파일 선택 <input>은 꾸미는 게 엄청 어려움
하지만 이 <input>을 숨기고 <label>버튼을 만들어줄 수는 있음

  // html
  /* way 1 */
  <label for="file">
          Add photo
          <input type="file" accept="image/*" id="file"
        /></label>

  /* way 2 */
  <label for="file">
          Add photo </label>
  <input type="file" accept="image/*" id="file"
        />

<label>의 <for>값과 <input>의 <id>값만 동일하면 위치 상관없이 작동
그래도 정리하기 편하게 <label>태그 안에다가 넣기


시간 있을 때 만들어보세용 ~
- 전체 삭제 작업 전에 확인창


#3.5 Code Challenge

challenge
- 텍스트의 폰트 && 사이즈 바꾸기
  - 유저가 폰트 크기와 종류를 바꿀 수 있도록
    ex) range(슬라이더)를 만들어서 폰트 사이즈를 바꿀 수 있게라든가

- 텍스트의 fillStyle or strokeStyle 선택할 수 있도록

- 선뿐만 아니라 모양을 그릴 수 있는 옵션
  +) 1. onMove 함수로 와서 `stroke();`대신 `fill(); 하거나
     2. `mousedown`해서 `moseup`할 때 `ctx.fill`

        function cancelPainting(event) {
        isPainting = false;
        ctx.fill();
        ctx.beginPath();
      }